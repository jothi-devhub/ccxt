<?php
namespace ccxt;
use \ccxt\Precise;

// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

// -----------------------------------------------------------------------------
include_once __DIR__ . '/test_shared_methods.php';

function test_currency($exchange, $method, $entry) {
    $format = array(
        'info' => array(),
        'id' => 'btc',
        'code' => 'BTC',
        'name' => 'Bitcoin',
        'withdraw' => true,
        'deposit' => true,
        'precision' => $exchange->parse_number('0.0001'),
        'fee' => $exchange->parse_number('0.001'),
        'limits' => array(
            'withdraw' => array(
                'min' => $exchange->parse_number('0.01'),
                'max' => $exchange->parse_number('1000'),
            ),
            'deposit' => array(
                'min' => $exchange->parse_number('0.01'),
                'max' => $exchange->parse_number('1000'),
            ),
        ),
    );
    $empty_not_allowed_for = ['id', 'code'];
    assert_structure($exchange, $method, $entry, $format, $empty_not_allowed_for);
    assert_currency_code($exchange, $method, $entry, $entry['code']);
    //
    assert_greater($exchange, $method, $entry, 'precision', '0');
    assert_greater_or_equal($exchange, $method, $entry, 'fee', '0');
    $limits = $exchange->safe_value($entry, 'limits', array());
    $withdraw_limits = $exchange->safe_value($limits, 'withdraw', array());
    $deposit_limits = $exchange->safe_value($limits, 'deposit', array());
    assert_greater_or_equal($exchange, $method, $withdraw_limits, 'min', '0');
    assert_greater_or_equal($exchange, $method, $withdraw_limits, 'max', '0');
    assert_greater_or_equal($exchange, $method, $deposit_limits, 'min', '0');
    assert_greater_or_equal($exchange, $method, $deposit_limits, 'max', '0');
}
