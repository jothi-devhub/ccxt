<?php
namespace ccxt;
use \ccxt\Precise;

// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

// -----------------------------------------------------------------------------
include_once __DIR__ . '/test_shared_methods.php';

function test_ohlcv($exchange, $method, $entry, $symbol, $now) {
    $format = [1638230400000, $exchange->parse_number('0.123'), $exchange->parse_number('0.125'), $exchange->parse_number('0.121'), $exchange->parse_number('0.122'), $exchange->parse_number('123.456')];
    $empty_not_allowed_for = [0, 1, 2, 3, 4, 5];
    assert_structure($exchange, $method, $entry, $format, $empty_not_allowed_for);
    assert_timestamp($exchange, $method, $entry, $now, 0);
    $log_text = log_template($exchange, $method, $entry);
    //
    $length = count($entry);
    assert($length >= 6, 'ohlcv array length should be >= 6;' . $log_text);
    $skipped_exchanges = [];
    if (!$exchange->in_array($exchange->id, $skipped_exchanges)) {
        assert(($entry[1] === null) || ($entry[2] === null) || ($entry[1] <= $entry[2]), 'open > high, ' . $exchange->safe_string($entry, 1, 'undefined') . ' > ' . $exchange->safe_string($entry, 2, 'undefined')); // open <= high
        assert(($entry[3] === null) || ($entry[2] === null) || ($entry[3] <= $entry[2]), 'low > high, ' . $exchange->safe_string($entry, 2, 'undefined') . ' > ' . $exchange->safe_string($entry, 3, 'undefined')); // low <= high
        assert(($entry[3] === null) || ($entry[4] === null) || ($entry[3] <= $entry[4]), 'low > close, ' . $exchange->safe_string($entry, 3, 'undefined') . ' > ' . $exchange->safe_string($entry, 4, 'undefined')); // low <= close
    }
    assert(($symbol === null) || (is_string($symbol)), 'symbol ' . $symbol . ' is incorrect' . $log_text);
}
