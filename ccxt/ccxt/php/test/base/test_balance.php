<?php
namespace ccxt;
use \ccxt\Precise;

// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

// -----------------------------------------------------------------------------
include_once __DIR__ . '/test_shared_methods.php';

function test_balance($exchange, $method, $entry) {
    $format = array(
        'free' => array(),
        'used' => array(),
        'total' => array(),
        'info' => array(),
    );
    $empty_not_allowed_for = ['free', 'used', 'total'];
    assert_structure($exchange, $method, $entry, $format, $empty_not_allowed_for);
    $log_text = log_template($exchange, $method, $entry);
    //
    $codes = is_array($entry['total']) ? array_keys($entry['total']) : array();
    for ($i = 0; $i < count($codes); $i++) {
        $code = $codes[$i];
        assert_currency_code($exchange, $method, $entry, $code);
        $total = $exchange->safe_string($entry['total'], $code);
        $free = $exchange->safe_string($entry['free'], $code);
        $used = $exchange->safe_string($entry['used'], $code);
        $total_defined = $total !== null;
        $free_defined = $free !== null;
        $used_defined = $used !== null;
        if ($total_defined && $free_defined && $used_defined) {
            $free_and_used = Precise::string_add($free, $used);
            assert(Precise::string_eq($total, $free_and_used), 'free and used do not sum to total' . $log_text);
        } else {
            assert(!$total_defined && $free_defined && $used_defined, 'value of \"total\" is missing from balance calculations' . $log_text);
            assert($total_defined && !$free_defined && $used_defined, 'value of \"free\" is missing from balance calculations' . $log_text);
            assert($total_defined && $free_defined && !$used_defined, 'value of \"used\" is missing from balance calculations' . $log_text);
        }
    }
}
